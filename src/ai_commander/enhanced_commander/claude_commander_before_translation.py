"""
Claude Sonnet AI Commander - Professional Customer Service Experience
Giao ti·∫øp th√¥ng minh v·ªõi kh√°ch h√†ng t·ª´ nh·∫≠n y√™u c·∫ßu ƒë·∫øn tr·∫£ k·∫øt qu·∫£
"""

import asyncio
import json
from typing import Dict, Any, Optional
from dataclasses import dataclass
import time

# Import existing AI Commander components
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from intent_analysis import IntentAnalyzer, IntentAnalysisResult
from requirement_collector import SmartRequirementCollector, RequirementCollectionResult
from workflow_orchestration import WorkflowOrchestrator, WorkflowResult
from adaptive_learning import AdaptiveLearner

# Content transformation integration
try:
    from src.infrastructure.content_transformation.transformation_manager import TransformationManager
except ImportError:
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
    from src.infrastructure.content_transformation.transformation_manager import TransformationManager


@dataclass
class CustomerConversation:
    """Cu·ªôc h·ªôi tho·∫°i v·ªõi kh√°ch h√†ng"""
    session_id: str
    customer_input: str
    content: Optional[str] = None
    claude_greeting: str = ""
    smart_questions: list = None
    customer_answers: Dict[str, str] = None
    final_result: str = ""
    conversation_history: list = None
    
    def __post_init__(self):
        if self.smart_questions is None:
            self.smart_questions = []
        if self.customer_answers is None:
            self.customer_answers = {}
        if self.conversation_history is None:
            self.conversation_history = []


class ClaudeSonnetCommander:
    """
    Claude Sonnet powered AI Commander
    Chuy√™n gia t∆∞ v·∫•n v√† x·ª≠ l√Ω y√™u c·∫ßu kh√°ch h√†ng
    """
    
    def __init__(self):
        """Initialize Claude Sonnet AI Commander"""
        print("ü§ñ Initializing Claude Sonnet AI Commander...")
        
        # Initialize backend AI systems
        self.intent_analyzer = IntentAnalyzer()
        self.requirement_collector = SmartRequirementCollector()
        self.workflow_orchestrator = WorkflowOrchestrator()
        self.adaptive_learner = AdaptiveLearner()
        
        # Initialize content transformation
        self.transformation_manager = TransformationManager()
        
        # Claude conversation templates
        self.conversation_templates = self._load_conversation_templates()
        
        print("‚úÖ Claude Sonnet AI Commander ready for customer service!")
    
    def _load_conversation_templates(self) -> Dict[str, str]:
        """Load professional conversation templates"""
        return {
            "greeting_template": """
Ch√†o {customer_name}! T√¥i l√† Claude, tr·ª£ l√Ω AI th√¥ng minh c·ªßa h·ªá th·ªëng d·ªãch thu·∫≠t.

T√¥i hi·ªÉu b·∫°n mu·ªën: "{customer_request}"

{intent_analysis}

ƒê·ªÉ ƒë·∫£m b·∫£o k·∫øt qu·∫£ ho√†n h·∫£o nh·∫•t, cho t√¥i h·ªèi th√™m:
{smart_questions}

T√¥i s·∫Ω x·ª≠ l√Ω ngay khi nh·∫≠n ƒë∆∞·ª£c th√¥ng tin t·ª´ b·∫°n! üöÄ
            """,
            
            "processing_template": """
C·∫£m ∆°n b·∫°n! T√¥i ƒë√£ hi·ªÉu r√µ y√™u c·∫ßu:

üìã Y√™u c·∫ßu: {intent}
üë§ ƒê·ªëi t∆∞·ª£ng: {audience}  
üéØ Ch·∫•t l∆∞·ª£ng: {quality_target}
‚ö° Chi·∫øn l∆∞·ª£c: {strategy}

ƒêang x·ª≠ l√Ω v·ªõi h·ªá th·ªëng AI 7 t·∫ßng... ‚è≥
            """,
            
            "completion_template": """
‚úÖ Ho√†n th√†nh! ƒê√¢y l√† k·∫øt qu·∫£ cho b·∫°n:

{result_content}

üìä Th√¥ng tin k·ªπ thu·∫≠t:
- Ch·∫•t l∆∞·ª£ng ƒë·∫°t ƒë∆∞·ª£c: {quality}%
- Th·ªùi gian x·ª≠ l√Ω: {processing_time}s
- Chi·∫øn l∆∞·ª£c: {strategy}
- AI stages: {ai_stages}

{additional_suggestions}

B·∫°n c√≥ h√†i l√≤ng v·ªõi k·∫øt qu·∫£ n√†y kh√¥ng? C·∫ßn ƒëi·ªÅu ch·ªânh g√¨ th√™m kh√¥ng ·∫°? üí¨
            """
        }
    
    async def handle_customer_request(self, customer_input: str, 
                                    customer_name: str = "b·∫°n",
                                    content: str = None) -> CustomerConversation:
        """
        X·ª≠ l√Ω y√™u c·∫ßu kh√°ch h√†ng v·ªõi tr·∫£i nghi·ªám chuy√™n nghi·ªáp
        
        Args:
            customer_input: Y√™u c·∫ßu c·ªßa kh√°ch h√†ng
            customer_name: T√™n kh√°ch h√†ng (t√πy ch·ªçn)
            content: N·ªôi dung c·∫ßn x·ª≠ l√Ω (n·∫øu c√≥)
            
        Returns:
            CustomerConversation: Cu·ªôc h·ªôi tho·∫°i ho√†n ch·ªânh
        """
        session_id = f"session_{int(time.time())}"
        conversation = CustomerConversation(
            session_id=session_id,
            customer_input=customer_input,
            content=content
        )
        
        print(f"ü§ñ Claude Commander processing request: {customer_input}")
        
        # STEP 1: CLAUDE ANALYZES INTENT & CREATES GREETING
        print("üß† Step 1: Intelligent intent analysis...")
        intent_result = self.intent_analyzer.analyze_intent(customer_input)
        
        # STEP 2: CLAUDE GENERATES SMART QUESTIONS
        print("ü§î Step 2: Generating smart questions...")
        req_result = self.requirement_collector.collect_requirements(intent_result)
        
        # STEP 3: CLAUDE CREATES PROFESSIONAL GREETING
        conversation.claude_greeting = self._create_claude_greeting(
            customer_input, customer_name, intent_result, req_result
        )
        conversation.smart_questions = [q.text for q in req_result.questions_asked]
        
        print("üí¨ Claude greeting created!")
        
        # STEP 4: SIMULATE CUSTOMER ANSWERS (in real app, wait for customer)
        print("‚è≥ Simulating customer answers...")
        conversation.customer_answers = self._simulate_customer_answers(req_result.questions_asked)
        
        # STEP 5: CLAUDE PROCESSES WITH AI INTELLIGENCE
        print("‚ö° Step 5: Processing with AI intelligence...")
        processing_message = self._create_processing_message(intent_result, conversation.customer_answers)
        conversation.conversation_history.append(processing_message)
        
        # STEP 6: EXECUTE WORKFLOW
        workflow_result = await self.workflow_orchestrator.orchestrate_workflow(
            intent_result, req_result, content or customer_input
        )

        # Process content transformation if applicable
        if workflow_result.success and hasattr(self, 'transformation_manager'):
            trans_result = await self.process_transformation_request(
                intent_result, 
                req_result,
                {'content': customer_input, 'context': content}
            )
            if trans_result:
                workflow_result.output_data['transformation_result'] = trans_result

        
        # STEP 7: CLAUDE DELIVERS PROFESSIONAL RESULTS
        print("üéØ Step 7: Delivering professional results...")
        conversation.final_result = self._create_completion_message(
            workflow_result, intent_result, conversation.customer_answers
        )
        
        # STEP 8: RECORD LEARNING EVENT
        self.adaptive_learner.record_learning_event(
            customer_input, intent_result, req_result, workflow_result
        )
        
        print(f"‚úÖ Customer service completed for session {session_id}")
        return conversation

    async def process_transformation_request(self, intent_result, req_result, customer_info):
        """Process content transformation based on customer requirements"""
        try:
            # Map intent to transformation type
            transformation_map = {
                "create_podcast": "podcast",
                "create_video": "video", 
                "create_education": "education"
            }
            
            trans_type = transformation_map.get(intent_result.primary_intent)
            if not trans_type:
                return None
                
            # Create transformation request
            from src.infrastructure.content_transformation.base_transformer import TransformationRequest
            trans_request = TransformationRequest(
                source_text=customer_info.get('content', ''),
                transformation_type=trans_type,
                target_audience=req_result.requirements.get('audience', 'general'),
                context=customer_info.get('context', '')
            )
            
            # Process with transformation manager
            result = await self.transformation_manager.transform_content(trans_request)
            return result
            
        except Exception as e:
            print(f"Transformation error: {e}")
            return None


    async def process_transformation_request(self, intent_result, req_result, customer_info):
        """Process content transformation based on customer requirements"""
        try:
            # Map intent to transformation type
            transformation_map = {
                "create_podcast": "podcast",
                "create_video": "video", 
                "create_education": "education"
            }
            
            trans_type = transformation_map.get(intent_result.primary_intent)
            if not trans_type:
                return None
                
            # Create transformation request
            from src.infrastructure.content_transformation.base_transformer import TransformationRequest
            trans_request = TransformationRequest(
                source_text=customer_info.get('content', ''),
                transformation_type=trans_type,
                target_audience=req_result.requirements.get('audience', 'general'),
                context=customer_info.get('context', '')
            )
            
            # Process with transformation manager
            result = await self.transformation_manager.transform_content(trans_request)
            return result
            
        except Exception as e:
            print(f"Transformation error: {e}")
            return None

    
    def _create_claude_greeting(self, customer_input: str, customer_name: str,
                              intent_result: IntentAnalysisResult,
                              req_result: RequirementCollectionResult) -> str:
        """Create professional Claude greeting"""
        
        # Analyze intent for greeting
        intent_descriptions = {
            "create_podcast": "t·∫°o podcast script chuy√™n nghi·ªáp",
            "create_video": "t·∫°o video scenario h·∫•p d·∫´n", 
            "create_education": "t·∫°o module h·ªçc t·∫≠p t∆∞∆°ng t√°c",
            "translate_only": "d·ªãch thu·∫≠t ch√≠nh x√°c",
            "analyze_content": "ph√¢n t√≠ch n·ªôi dung chi ti·∫øt"
        }
        
        intent_desc = intent_descriptions.get(intent_result.primary_intent.value, "x·ª≠ l√Ω n·ªôi dung")
        
        # Create smart questions text
        questions_text = ""
        for i, question in enumerate(req_result.questions_asked, 1):
            questions_text += f"{i}. {question.text}\n"
        
        if not questions_text:
            questions_text = "T√¥i c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω ngay!"
        
        greeting = self.conversation_templates["greeting_template"].format(
            customer_name=customer_name,
            customer_request=customer_input,
            intent_analysis=f"üéØ T√¥i nh·∫≠n th·∫•y b·∫°n mu·ªën {intent_desc} (ƒë·ªô tin c·∫≠y: {intent_result.confidence_score:.0%})",
            smart_questions=questions_text
        )
        
        return greeting.strip()
    
    def _simulate_customer_answers(self, questions) -> Dict[str, str]:
        """Simulate customer answers (in real app, collect from UI)"""
        answers = {}
        
        # Intelligent defaults based on question types
        for question in questions:
            if "th·ªùi l∆∞·ª£ng" in question.text.lower():
                if "podcast" in question.text.lower():
                    answers[question.id] = "15-20 ph√∫t"
                else:
                    answers[question.id] = "5-10 ph√∫t"
            elif "phong c√°ch" in question.text.lower():
                answers[question.id] = "Chuy√™n nghi·ªáp, d·ªÖ hi·ªÉu"
            elif "ƒë·ªëi t∆∞·ª£ng" in question.text.lower():
                answers[question.id] = "Nh√¢n vi√™n c√¥ng ty"
            elif "lo·∫°i" in question.text.lower():
                answers[question.id] = "Presentation chuy√™n nghi·ªáp"
            else:
                answers[question.id] = "Theo g·ª£i √Ω c·ªßa AI Commander"
        
        return answers
    
    def _create_processing_message(self, intent_result: IntentAnalysisResult, 
                                 customer_answers: Dict[str, str]) -> str:
        """Create processing status message"""
        
        # Determine strategy based on user expertise
        strategy_mapping = {
            "professional": "Ch·∫•t l∆∞·ª£ng t·ªëi ƒëa",
            "advanced": "C√¢n b·∫±ng ch·∫•t l∆∞·ª£ng-t·ªëc ƒë·ªô", 
            "intermediate": "T·ªëi ∆∞u to√†n di·ªán",
            "beginner": "T·ªëc ƒë·ªô ∆∞u ti√™n"
        }
        
        strategy = strategy_mapping.get(intent_result.user_expertise_level.value, "C√¢n b·∫±ng t·ªëi ∆∞u")
        
        processing_msg = self.conversation_templates["processing_template"].format(
            intent=intent_result.primary_intent.value.replace("_", " ").title(),
            audience=customer_answers.get("target_audience", "ƒêa d·∫°ng"),
            quality_target="90%" if intent_result.user_expertise_level.value == "professional" else "85%",
            strategy=strategy
        )
        
        return processing_msg.strip()
    
    def _create_completion_message(self, workflow_result: WorkflowResult,
                                 intent_result: IntentAnalysisResult,
                                 customer_answers: Dict[str, str]) -> str:
        """Create professional completion message with results"""
        
        # Add suggestions based on result quality
        suggestions = ""
        if workflow_result.quality_achieved >= 0.9:
            suggestions = "üåü K·∫øt qu·∫£ xu·∫•t s·∫Øc! B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ngay."
        elif workflow_result.quality_achieved >= 0.8:
            suggestions = "‚ú® Ch·∫•t l∆∞·ª£ng t·ªët! C√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh nh·ªè theo s·ªü th√≠ch."
        else:
            suggestions = "üí° K·∫øt qu·∫£ kh·∫£ d·ª•ng. ƒê·ªÅ xu·∫•t ch·∫°y l·∫°i v·ªõi ch·∫ø ƒë·ªô ch·∫•t l∆∞·ª£ng cao h∆°n."
        
        completion_msg = self.conversation_templates["completion_template"].format(
            result_content=workflow_result.final_output,
            quality=f"{workflow_result.quality_achieved*100:.0f}",
            processing_time=f"{workflow_result.processing_time:.2f}",
            strategy=workflow_result.workflow_steps[0] if workflow_result.workflow_steps else "Auto-optimized",
            ai_stages=len(workflow_result.workflow_steps),
            additional_suggestions=suggestions
        )
        
        return completion_msg.strip()
    
    def display_conversation(self, conversation: CustomerConversation):
        """Display complete customer conversation"""
        print("\n" + "="*80)
        print("ü§ñ CLAUDE SONNET AI COMMANDER - CUSTOMER SERVICE LOG")
        print("="*80)
        
        print(f"\nüìû SESSION: {conversation.session_id}")
        print(f"üìù CUSTOMER REQUEST: {conversation.customer_input}")
        
        print(f"\nüí¨ CLAUDE GREETING:")
        print("-" * 50)
        print(conversation.claude_greeting)
        
        if conversation.customer_answers:
            print(f"\nüìã CUSTOMER ANSWERS:")
            for question_id, answer in conversation.customer_answers.items():
                print(f"   ‚Ä¢ {question_id}: {answer}")
        
        if conversation.conversation_history:
            print(f"\n‚ö° PROCESSING STATUS:")
            print("-" * 50)
            for message in conversation.conversation_history:
                print(message)
        
        print(f"\nüéØ FINAL RESULT:")
        print("-" * 50)
        print(conversation.final_result)
        
        print("\n" + "="*80)
        print("‚úÖ CUSTOMER SERVICE COMPLETED")
        print("="*80)


# Test Claude Sonnet AI Commander
async def test_claude_commander():
    """Test Claude Sonnet AI Commander with customer scenarios"""
    
    commander = ClaudeSonnetCommander()
    
    print("üß™ TESTING CLAUDE SONNET AI COMMANDER")
    print("="*60)
    
    # Test Scenario 1: Professional Podcast Creation
    print("\nüéôÔ∏è SCENARIO 1: Professional Podcast Creation")
    conversation1 = await commander.handle_customer_request(
        customer_input="T√¥i c·∫ßn l√†m podcast doanh nghi·ªáp t·ª´ b√°o c√°o Q4 n√†y",
        customer_name="Anh Minh",
        content="Doanh thu Q4 tƒÉng 25% ƒë·∫°t 150 t·ª∑. EBITDA margin c·∫£i thi·ªán l√™n 22%. ROI ƒë·∫ßu t∆∞ R&D ƒë·∫°t 340%."
    )
    
    commander.display_conversation(conversation1)
    
    # Test Scenario 2: Educational Video
    print("\n\nüé¨ SCENARIO 2: Educational Video Creation")
    conversation2 = await commander.handle_customer_request(
        customer_input="L√†m video gi·∫£i th√≠ch AI cho nh√¢n vi√™n m·ªõi",
        customer_name="Ch·ªã Lan",
        content="Artificial Intelligence l√† kh·∫£ nƒÉng m√°y m√≥c th·ª±c hi·ªán c√°c t√°c v·ª• th√¥ng minh nh∆∞ con ng∆∞·ªùi."
    )
    
    commander.display_conversation(conversation2)
    
    print("\nüèÜ CLAUDE SONNET AI COMMANDER: READY FOR CUSTOMER SERVICE!")


if __name__ == "__main__":
    asyncio.run(test_claude_commander())
